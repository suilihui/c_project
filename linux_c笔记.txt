
2. 编译工具gcc
    1>. gcc工作流程
        1). 预处理 gcc -E
        2). 编译   gcc -S
        3). 汇编   gcc -c
        4). 链接   没参数
        
    2>. gcc的一些参数使用
        1). -E    生成预处理文件
        2). -S    生成汇编文件
        3). -D    在编译的时候定义宏(控制log输出)
        4). -c    只编译子程序, 生成的文件后缀是 .o
        5). -o    指定生成文件的名字
        6). -I    指定头文件的路径
        7). -L    指定动(静)态库的路径
        8). -l    指定动(静)态库名称
        9). -g    gdb调试的时候需要添加该参数
        10). -O   编译优化, 3个等级 -O1一般优化 -O2中等优化 -O3最优优化
        11). -Wall 编译期间输出警告信息
    
    例: gcc main.c -o app -I include -L lib -l MyCalc -D DEBUG -O3 -g
    
3. 静态库的制作
    1>. 命名规则:
        1). lib + 库的名字 + .a
        2). libmytest.a
        
    2>. 制作静态库:
        1). 生成.o文件 -- .c --> .o  -c
            gcc -c *.c
        2). 将生成的.o文件打包  
            ar rcs 静态库的名字 *.o
        
    3>. 发布和使用静态库:
        1). 发布静态库
        2). 头文件
        gcc main.c (库) -LlibPath -llibname -o app -Iinclude
        
    4>. 静态库的优缺点:
        优点:
        1). 发布程序的时候,不需要提供对应的库
        2). 加载库的速度快
        
        缺点:
        1). 库被打包到应用程序中,导致库的体积很大
        2). 库发生了改变, 需要重新编译程序
        
4. 动态库的制作
    1>. 命名规则:
        1). lib + 名字 + .so
    2>. 制作步骤:
        1). 生成与位置无关的代码 (生成与位置无关的.o)
        2). 将.o打包成共享库(动态库) 
            gcc -fPIC -c *.c -I../include                   //生成目录无关的.o文件
            gcc -shared -o libMyCalc.so *.o                 //生成.so文件
            gcc main.c -Iinclude -L./lib -lMyCalc -o myapp  //编译
            
            执行 ./myapp 报错:
            ./myapp: error while loading shared libraries: libMyCalc.so: cannot open shared object file: No such file or directory
            
            解决方法: 添加自定义.so搜索路径环境变量,
            export LD_LIBRARY_PATH=./lib
    3>. 发布和使用共享库:
    4>. 解决程序执行时动态库无法被加载的问题:
        1). 放到系统的库目录中 -- 不允许使用
        2). 临时测试
                环境变量: LD_LIBRARY_PATH, 将动态库的路径设置给该变量
                将设置的值，导入到系统环境变量中: export LD_LIBRARY_PATH
        3). 不常用的方法（永久设置）:
            在家目录的 .bashrc文件中 添加一句话: export LD_LIBRARY_PATH=动态库目录的绝对路径
            .bashrc修改完成, 需要重启终端
        4).
            1. 需要找动态连接器的配置文件 -- /etc/ld.so.conf
            2. 动态库的路径写到配置文件中 -- 绝对路径
            3. 更新 -- sudo ldconfig -v
    5>. 优缺点：
        优点：
            1. 执行程序体积小;
            2. 动态库更新了，不需要重新编译程序(函数接口不变);
        缺点：
            1. 发布程序的时候，需要将动态库提供给用户;
            2. 动态库没有被打包到应用程序中，加载速度相对较慢;
        
        
