
2. 编译工具gcc
    1>. gcc工作流程
        1). 预处理 gcc -E
        2). 编译   gcc -S
        3). 汇编   gcc -c
        4). 链接   没参数
        
    2>. gcc的一些参数使用
        1). -E    生成预处理文件
        2). -S    生成汇编文件
        3). -D    在编译的时候定义宏(控制log输出)
        4). -c    只编译子程序, 生成的文件后缀是 .o
        5). -o    指定生成文件的名字
        6). -I    指定头文件的路径
        7). -L    指定动(静)态库的路径
        8). -l    指定动(静)态库名称
        9). -g    gdb调试的时候需要添加该参数
        10). -O   编译优化, 3个等级 -O1一般优化 -O2中等优化 -O3最优优化
        11). -Wall 编译期间输出警告信息
    
    例: gcc main.c -o app -I include -L lib -l MyCalc -D DEBUG -O3 -g
    
3. 静态库的制作
    1>. 命名规则:
        1). lib + 库的名字 + .a
        2). libmytest.a
        
    2>. 制作静态库:
        1). 生成.o文件 -- .c --> .o  -c
            gcc -c *.c
        2). 将生成的.o文件打包  
            ar rcs 静态库的名字 *.o
        
    3>. 发布和使用静态库:
        1). 发布静态库
        2). 头文件
        gcc main.c (库) -LlibPath -llibname -o app -Iinclude
        
    4>. 静态库的优缺点:
        优点:
        1). 发布程序的时候,不需要提供对应的库
        2). 加载库的速度快
        
        缺点:
        1). 库被打包到应用程序中,导致库的体积很大
        2). 库发生了改变, 需要重新编译程序
        
4. 动态库的制作
    1>. 命名规则:
        1). lib + 名字 + .so
        
    2>. 制作步骤:
        1). 生成与位置无关的代码 (生成与位置无关的.o)
        2). 将.o打包成共享库(动态库) 
            gcc -fPIC -c *.c -I../include                   //生成目录无关的.o文件
            gcc -shared -o libMyCalc.so *.o                 //生成.so文件
            gcc main.c -Iinclude -L./lib -lMyCalc -o myapp  //编译
            
            执行 ./myapp 报错:
            ./myapp: error while loading shared libraries: libMyCalc.so: cannot open shared object file: No such file or directory
            
            解决方法: 添加自定义.so搜索路径环境变量,
            export LD_LIBRARY_PATH=./lib
            
    3>. 发布和使用共享库: lib include
        gcc main.c -Llib -lmytest -Iinclude -o app
        
    4>. 解决程序执行时动态库无法被加载的问题:
        1). 放到系统的库目录中 -- 不允许使用
        2). 临时测试
                环境变量: LD_LIBRARY_PATH, 将动态库的路径设置给该变量
                将设置的值，导入到系统环境变量中: export LD_LIBRARY_PATH
        3). 不常用的方法（永久设置）:
            在家目录的 .bashrc文件中 添加一句话: export LD_LIBRARY_PATH=动态库目录的绝对路径
            .bashrc修改完成, 需要重启终端
        4).
            1. 需要找动态连接器的配置文件 -- /etc/ld.so.conf
            2. 动态库的路径写到配置文件中 -- 绝对路径
            3. 更新 -- sudo ldconfig -v
    5>. 优缺点：
        优点：
            1. 执行程序体积小;
            2. 动态库更新了，不需要重新编译程序(函数接口不变);
        缺点：
            1. 发布程序的时候，需要将动态库提供给用户;
            2. 动态库没有被打包到应用程序中，加载速度相对较慢;
        
5. gdb调试:
    1>. 命令说明:
        start        -- 开始执行; 只执行一步
        run    (r)   -- 开始执行，遇到断点时暂停;
        list   (l)   -- 显示源代码; 例: l + 行号
        info   (i)   -- 查看信息;   例: info breakpoints, 简写: i b
        break  (b)   -- 设置断点;   例: 普通断点: break 20, 条件断点: b 25 if i==50, 
        next   (n)   -- 执行单步调试;
        step   (s)   -- 进入到函数体内部;
        print  (p)   -- 查看变量值;
        until  (u)   -- 跳出单次循环;
        delete (d)   -- 删除断点;      例： delete 编号
        continue (c) -- 执行到断点位置;
        set          -- 设置变量的值;   例： set var i=10
        ptype        -- 查看变量类型;   例： ptype i 返回：type = int
        finish       -- 跳出当前函数;
        display      -- 追踪变量的值;   例： display i, display j
        undisplay    -- 取消追踪变量;   例： undisplay 编号
        quit         -- 退出gdb
        
    2>. 调试的大体流程:
        1. 启动gdb
            start -- 只执行一步
            n -- next
            s -- step
            c -- continue  -- 直接停在断点的位置
            
        2. 查看代码： l (list)
            例：
                1 行号 (函数名)
                l 文件名:行号
        3. 设置断点：
            1) 设置当前文件断点: b (break)
                b 行号 (函数名)
                b 文件名:行号 (函数名)
            
            2) 设置条件断点: 
                b 行号 if val==19
            
            3) 删除断点: 
                d (delete) 编号
                获取编号: i b
                        
        4. 查看设置的断点: info breakpoints
        5. 开始执行gdb调试:
            执行一步操作:
                继续执行:
            执行多步，直接停在断点处: continue
        6. 单步调试
            进入函数体内部: s -- step
            从函数体内部跳出: finish
            不进入函数体内部: n (next)
            退出当前循环:  u (until)
        7. 查看变量的值:   p (print) 变量名
        8. 查看变量的类型:  ptype 变量名
        9. 设置变量的值:   set var 变量名=值
        10.设置追踪变量: 
            display 变量名
        取消追踪变量: 
            undisplay 编号
            获取编号: info display
            
        11. 退出gdb:
            quit
        
    命令例:
        查看断点: info breakpoints
        
        Num  Type           Disp Enb Address            What
        1    breakpoint     keep y   0x0000000000400715 in main at main.c:6
             stop only if sum==26
        2    breakpoint     keep y   0x0000000000400727 in main at main.c:7
        
        Num  - 断点编号
        Type - 类型
        Enb  - 是否可用, 可用 y, 不可用 n
        What - 当前断点属于哪个文件
        
6. makefile的编写:
    1>. makefile的命名:
        makefile 或 Makefile
    2>. makefile的规则:
        规则中的三要素: 目标, 依赖, 命令
            目标: 依赖条件
                命令
        
        子目标和终极目标的关系:
            终极目标先检查弃依赖是否存在，如不存在则寻找下面的子目标，
            子目标根据其依赖文件生成子目标文件; 如果有多个依赖则依次查找并生成。
        
        模式规则：
        %.o: %.c
            $(CC) -c $< -o $@
        
        makefile中的自动变量: (只能在规则的命令中使用)
        $<: 规则中的第一个依赖
        $@: 规则中的目标
        $^: 规则中的所有依赖
        
    3>. makefile样例:
    
        #自定义变量
        obj=main.o add.o sub.o mul.o
        target=myapp
        #makefile中自己维护的变量
        CC = gcc
        CPFLAGS = -I
        #使用函数
        src=$(wildcard ./*.c)
        obj=$(patsubst ./%.c, ./%.o, $(src))

        $(target): $(obj)
            $(CC) $(obj) -o $(target)

        #模式规则
        # $< 对应规则中的依赖, 即 %.c
        # $@ 对应规则中的目标, 即 %.o
        %.o: %.c
            $(CC) -c $< -o $@
            
        #声明clean为伪目标，
        #即使目录下有clean文件也会执行clean下的命令
        .PHONY: clean
        clean:
            rm -f $(obj) $(target)
        
    4>. 函数:
        1). 扩展通配符，获取指定目录下的指定类型文件
            src=$(wildcard ./*.c)
        2). 替换通配符
            obj=$(patsubst ./%.c, ./%.o, $(src))
        3). 去除路径
            dir=$(notdir $(src))

C库函数:

3. 系统IO函数
    1>. 一些概念
        文件描述符
        PCB
        C库函数的IO缓冲区
        
    2>. open 函数
        
    3>. read 函数
    
    4>. write 函数
    
    5>. lseek 函数
    
    6>. close 函数
        

        
        
cpu为什么要使用虚拟地址空间与物理地址空间映射？解决了什么样的问题？

1、方便编译器和操作系统安排程序的地址分布。
    程序可以使用一系列相邻的虚拟地址来访问物理内存中不相邻的大内存缓冲区。
    
2、方便进程之间隔离。
    不同进程使用的虚拟地址彼此隔离。一个进程中的代码无法更改正在由另一个进程使用的物理内存。
    
3、方便OS使用你那可怜的内存。
    程序可以使用一系列虚拟地址来访问大于可用物理内存的内存缓冲区。当物理内存的供应量变小时，
    内存管理器可以将物理内存页(通常大小为4KB)保存到磁盘文件。数据和代码页会根据需要在物理内存与磁盘之间移动。
  
